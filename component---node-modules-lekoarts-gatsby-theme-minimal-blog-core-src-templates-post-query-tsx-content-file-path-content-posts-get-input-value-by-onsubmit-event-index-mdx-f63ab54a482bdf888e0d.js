"use strict";(self.webpackChunkdev_flavoured_blog=self.webpackChunkdev_flavoured_blog||[]).push([[769],{4765:function(e,t,n){n.d(t,{F:function(){return p},Z:function(){return g}});var a=n(7294),r=n(8733),l=n(795),i=n(1322),o=n(6799),m=n(8871);var c=e=>{let{post:t}=e;return null};const s=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var u=e=>{let{data:{post:t},children:n}=e;return(0,r.tZ)(i.Z,null,(0,r.tZ)(l.X6,{as:"h1",variant:"styles.h1"},t.title),(0,r.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.tZ)("time",null,t.date),t.tags&&(0,r.tZ)(a.Fragment,null," — ",(0,r.tZ)(o.Z,{tags:t.tags})),t.timeToRead&&" — ",t.timeToRead&&(0,r.tZ)("span",null,t.timeToRead," min read")),(0,r.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:s.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,r.tZ)(c,{post:t}))};const p=e=>{var t,n,a;let{data:{post:l}}=e;return(0,r.tZ)(m.Z,{title:l.title,description:l.description?l.description:l.excerpt,image:l.banner?null===(t=l.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.resize)||void 0===a?void 0:a.src:void 0,pathname:l.slug,canonicalUrl:l.canonicalUrl})};function g(e){let{...t}=e;return a.createElement(u,t)}},6799:function(e,t,n){var a=n(8733),r=n(7294),l=n(1883),i=n(3494),o=n(9706);t.Z=e=>{let{tags:t}=e;const{tagsPath:n,basePath:m}=(0,i.Z)();return(0,a.tZ)(r.Fragment,null,t.map(((e,t)=>(0,a.tZ)(r.Fragment,{key:e.slug},!!t&&", ",(0,a.tZ)(l.Link,{sx:e=>{var t;return{...null===(t=e.styles)||void 0===t?void 0:t.a}},to:(0,o.Z)("/"+m+"/"+n+"/"+e.slug)},e.name)))))}},8871:function(e,t,n){var a=n(7294),r=n(1883),l=n(4232);t.Z=e=>{let{title:t="",description:n="",pathname:i="",image:o="",children:m=null,canonicalUrl:c=""}=e;const s=(0,l.Z)(),{siteTitle:u,siteTitleAlt:p,siteUrl:g,siteDescription:d,siteImage:E,author:f,siteLanguage:h}=s,v={title:t?t+" | "+u:p,description:n||d,url:""+g+(i||""),image:""+g+(o||E)};return a.createElement(a.Fragment,null,a.createElement("html",{lang:h}),a.createElement("title",null,v.title),a.createElement("meta",{name:"description",content:v.description}),a.createElement("meta",{name:"image",content:v.image}),a.createElement("meta",{property:"og:title",content:v.title}),a.createElement("meta",{property:"og:url",content:v.url}),a.createElement("meta",{property:"og:description",content:v.description}),a.createElement("meta",{property:"og:image",content:v.image}),a.createElement("meta",{property:"og:type",content:"website"}),a.createElement("meta",{property:"og:image:alt",content:v.description}),a.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),a.createElement("meta",{name:"twitter:title",content:v.title}),a.createElement("meta",{name:"twitter:url",content:v.url}),a.createElement("meta",{name:"twitter:description",content:v.description}),a.createElement("meta",{name:"twitter:image",content:v.image}),a.createElement("meta",{name:"twitter:image:alt",content:v.description}),a.createElement("meta",{name:"twitter:creator",content:f}),a.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,r.withPrefix)("/favicon-32x32.png")}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,r.withPrefix)("/favicon-16x16.png")}),a.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,r.withPrefix)("/apple-touch-icon.png")}),c?a.createElement("link",{rel:"canonical",href:c}):null,m)}},8689:function(e,t,n){n.r(t),n.d(t,{Head:function(){return o.F},default:function(){return m}});var a=n(7294),r=n(1151);function l(e){const t=Object.assign({p:"p",code:"code",pre:"pre"},(0,r.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"React에서 input 태그에 입력된 값을 사용하려고 할 때는 일반적으로 input 태그의 ",a.createElement(t.code,null,"onChange")," 속성과 ",a.createElement(t.code,null,"useState")," 훅으로 input에 입력된 글자를 state에 저장해두고, submit이 발생했을 때 그것을 사용해요."),"\n",a.createElement(t.p,null,"이럴 경우 사용자가 input에 글을 입력할 때마다 리렌더가 발생해요."),"\n",a.createElement("br"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-typescript"},'import { useState, type ChangeEvent, type SyntheticEvent } from \'react\'\n\ninterface FormData {\n  email: {\n    value?: string\n  }\n  password: {\n    value?: string\n  }\n}\n\nexport default function Comp {\n  const [email, setEmail] = useState(\'\')\n  const [password, setPassword] = useState(\'\')\n\n  const handleSubmit = (e: SyntheticEvent) => {\n    e.preventDefault()\n\n    // doing something\n  }\n\n  const handleChange = (e: ChangeEvent) => {\n    // event target의 타입 선언\n    const target = e.target as typeof e.target & FormData\n\n    // 각 input의 값을 state에 할당\n    const emailValue = target.email?.value\n    const passwordValue = target.password?.value\n    emailValue && setEmail(emailValue)\n    passwordValue && setPassword(passwordValue)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type="email" name="email" onChange={handleChange} />\n      <input type="password" name="password" onChange={handleChange} />\n      <button type="submit">Submit</button>\n    </form>\n  )\n}\n')),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,"저는 이게 싫어서 submit이 발생했을 때만 input 태그에 입력된 글을 가지고 와서 사용하고 싶었어요."),"\n",a.createElement(t.p,null,"이를 위해 위 코드를 아래와 같이 변경했어요. input 태그에서 ",a.createElement(t.code,null,"onChange")," 속성을 사용하는 이벤트 핸들러를 제거하고, form 태그의 ",a.createElement(t.code,null,"onSubmit")," 속성에서 발생하는 이벤트만을 사용하여 input 태그의 value를 가져와 사용하는 방식이에요."),"\n",a.createElement("br"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-typescript"},'import { useRef, type SyntheticEvent } from \'react\'\n\ninterface FormData {\n  email: {\n    value: string\n  }\n  password: {\n    value: string\n  }\n}\n\nexport default function Comp {\n  const formRef = useRef<HTMLFormElement>(null)\n\n  const handleSubmit = (e: SyntheticEvent) => {\n    e.preventDefault()\n\n    // event target의 타입 선언\n    const target = e.target as typeof e.target & FormData\n\n    // input 태그의 값을 변수에 할당\n    const email = target.email.value\n    const password = target.password.value\n\n    // doing something\n  }\n\n  return (\n    <form ref={formRef} onSubmit={handleSubmit}>\n      <input type="email" name="email" />\n      <input type="password" name="password" />\n      <button type="submit">Submit</button>\n    </form>\n  )\n}\n')),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,"이렇게 하면 사용자가 input 태그에 글을 입력하는 동안 리액트 자체에서는 아무런 일도 일어나지 않아요.🥳"))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?a.createElement(t,e,a.createElement(l,e)):l(e)},o=n(4765);function m(e){return a.createElement(o.Z,e,a.createElement(i,e))}o.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-get-input-value-by-onsubmit-event-index-mdx-f63ab54a482bdf888e0d.js.map