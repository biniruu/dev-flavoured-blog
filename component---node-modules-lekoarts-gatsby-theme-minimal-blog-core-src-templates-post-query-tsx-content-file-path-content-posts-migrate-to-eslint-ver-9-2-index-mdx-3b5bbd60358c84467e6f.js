"use strict";(self.webpackChunkdev_flavoured_blog=self.webpackChunkdev_flavoured_blog||[]).push([[267],{4765:function(e,n,t){t.d(n,{F:function(){return p},Z:function(){return g}});var l=t(7294),r=t(8733),i=t(795),a=t(1322),o=t(6799),m=t(8871);var s=e=>{let{post:n}=e;return null};const c=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var u=e=>{let{data:{post:n},children:t}=e;return(0,r.tZ)(a.Z,null,(0,r.tZ)(i.X6,{as:"h1",variant:"styles.h1"},n.title),(0,r.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.tZ)("time",null,n.date),n.tags&&(0,r.tZ)(l.Fragment,null," — ",(0,r.tZ)(o.Z,{tags:n.tags})),n.timeToRead&&" — ",n.timeToRead&&(0,r.tZ)("span",null,n.timeToRead," min read")),(0,r.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:c.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},t),(0,r.tZ)(s,{post:n}))};const p=e=>{var n,t,l;let{data:{post:i}}=e;return(0,r.tZ)(m.Z,{title:i.title,description:i.description?i.description:i.excerpt,image:i.banner?null===(n=i.banner)||void 0===n||null===(t=n.childImageSharp)||void 0===t||null===(l=t.resize)||void 0===l?void 0:l.src:void 0,pathname:i.slug,canonicalUrl:i.canonicalUrl})};function g(e){let{...n}=e;return l.createElement(u,n)}},6799:function(e,n,t){var l=t(8733),r=t(7294),i=t(1883),a=t(3494),o=t(9706);n.Z=e=>{let{tags:n}=e;const{tagsPath:t,basePath:m}=(0,a.Z)();return(0,l.tZ)(r.Fragment,null,n.map(((e,n)=>(0,l.tZ)(r.Fragment,{key:e.slug},!!n&&", ",(0,l.tZ)(i.Link,{sx:e=>{var n;return{...null===(n=e.styles)||void 0===n?void 0:n.a}},to:(0,o.Z)("/"+m+"/"+t+"/"+e.slug)},e.name)))))}},8871:function(e,n,t){var l=t(7294),r=t(1883),i=t(4232);n.Z=e=>{let{title:n="",description:t="",pathname:a="",image:o="",children:m=null,canonicalUrl:s=""}=e;const c=(0,i.Z)(),{siteTitle:u,siteTitleAlt:p,siteUrl:g,siteDescription:E,siteImage:f,author:d,siteLanguage:b}=c,h={title:n?n+" | "+u:p,description:t||E,url:""+g+(a||""),image:""+g+(o||f)};return l.createElement(l.Fragment,null,l.createElement("html",{lang:b}),l.createElement("title",null,h.title),l.createElement("meta",{name:"description",content:h.description}),l.createElement("meta",{name:"image",content:h.image}),l.createElement("meta",{property:"og:title",content:h.title}),l.createElement("meta",{property:"og:url",content:h.url}),l.createElement("meta",{property:"og:description",content:h.description}),l.createElement("meta",{property:"og:image",content:h.image}),l.createElement("meta",{property:"og:type",content:"website"}),l.createElement("meta",{property:"og:image:alt",content:h.description}),l.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),l.createElement("meta",{name:"twitter:title",content:h.title}),l.createElement("meta",{name:"twitter:url",content:h.url}),l.createElement("meta",{name:"twitter:description",content:h.description}),l.createElement("meta",{name:"twitter:image",content:h.image}),l.createElement("meta",{name:"twitter:image:alt",content:h.description}),l.createElement("meta",{name:"twitter:creator",content:d}),l.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,r.withPrefix)("/favicon-32x32.png")}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,r.withPrefix)("/favicon-16x16.png")}),l.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,r.withPrefix)("/apple-touch-icon.png")}),s?l.createElement("link",{rel:"canonical",href:s}):null,m)}},7033:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.F},default:function(){return m}});var l=t(7294),r=t(1151);function i(e){const n=Object.assign({h2:"h2",p:"p",strong:"strong",pre:"pre",code:"code",a:"a",blockquote:"blockquote",ul:"ul",li:"li"},(0,r.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h2,null,"eslint-plugin-import란?"),"\n",l.createElement(n.p,null,"간단히 말해서 ",l.createElement(n.strong,null,"eslint-plugin-import")," 플러그인은 import 한 모듈 목록을 관리하는 기능을 제공해요. 그런데 왜 ",l.createElement(n.strong,null,"eslint-plugin-import"),"를 추가해야 할까요?"),"\n",l.createElement(n.p,null,"사실 굳이 이 플러그인을 추가할 필요는 없어요. 다만 여기서는 ",l.createElement(n.strong,null,"flat config"),"를 아직 지원하지 않는 플러그인을 어떻게 추가해야 하는지 설명하기 위해 ",l.createElement(n.strong,null,"eslint-plugin-import"),"를 선택했을 뿐이에요."),"\n",l.createElement("br"),"\n",l.createElement(n.h2,null,"eslint-plugin-import 공식문서에 올라온, 반드시 실패하는 eslint-plugin-import 설치 방법"),"\n",l.createElement(n.p,null,"우선 패키지부터 설치해야겠죠?"),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"yarn add -D eslint-plugin-import\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,l.createElement(n.strong,null,"eslint-plugin-import")," ",l.createElement(n.a,{href:"https://github.com/import-js/eslint-plugin-import#config---flat-eslintconfigjs"},"공식문서"),"에서는 다음과 같이 ",l.createElement(n.strong,null,"flat config"),"에 플러그인을 추가하는 방법을 제시하고 있어요."),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript"},"import importPlugin from 'eslint-plugin-import';\nimport js from '@eslint/js';\n\nexport default [\n  js.configs.recommended,\n  importPlugin.flatConfigs.recommended,\n  {\n    files: ['**/*.{js,mjs,cjs}'],\n    languageOptions: {\n      ecmaVersion: 'latest',\n      sourceType: 'module',\n    },\n    rules: {\n      'no-unused-vars': 'off',\n      'import/no-dynamic-require': 'warn',\n      'import/no-nodejs-modules': 'warn',\n    },\n  },\n];\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"음... 우선 제가 이전 글에서 설명했던 ",l.createElement(n.strong,null,"@eslint/js")," 추가 방법과는 다른 방식으로 ",l.createElement(n.strong,null,"@eslint/js"),"를 추가했네요. 혹시 지난 편에서 만들었던 설정파일 기억하시나요?"),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript"},"// eslint.config.js\n\nimport js from '@eslint/js';\n\nexport default [\n  {\n    rules: {\n      ...js.configs.recommended.rules,\n      semi: 'error',\n      'prefer-const': 'error',\n    },\n  },\n];\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"전혀 다르죠? 하지만 괜찮아요. 저렇게 해도 전혀 문제없답니다."),"\n",l.createElement(n.p,null,"다만 여기서 알아둬야 할 점은, 예전에는 ",l.createElement(n.code,null,"js.configs.recommended"),"를 ",l.createElement(n.code,null,"extends")," 옵션에 추가했지만 ",l.createElement(n.strong,null,"flat config"),"에서는 ",l.createElement(n.code,null,"extends")," 옵션이 사라지고 위 코드처럼 배열에 직접 추가하는 방식으로 바뀌었다는 점이에요. 마찬가지로 다른 플러그인의 extend도 배열에 직접 추가하는 방식으로 사용하면 돼요."),"\n",l.createElement(n.p,null,"다시 돌아와서, ",l.createElement(n.strong,null,"flat config"),"에 ",l.createElement(n.strong,null,"eslint-plugin-import"),"를 추가하기 위해 공식문서에서 제공한 코드와 동일하게 코드를 추가하면 다음과 같은 에러가 발생해요."),"\n",l.createElement("br"),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,"TypeError: Cannot read properties of undefined (reading 'recommended')"),"\n"),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"실제로 ",l.createElement(n.code,null,"importPlugin"),"의 내용을 살펴보려고 하면 아무 것도 확인할 수 없어요. ",l.createElement(n.strong,null,"eslint-plugin-import"),"에서 default로 export 하는 모듈이 없어서 그래요."),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript"},"// eslint-plugin-import > lib > index.js\n\n'use strict';Object.defineProperty(exports, \"__esModule\", { value: true });var rules = exports.rules = {\n  'no-unresolved': require('./rules/no-unresolved'),\n  ...\n  // deprecated aliases to rules\n  'imports-first': require('./rules/imports-first') };\n\n\nvar configs = exports.configs = {\n  recommended: require('../config/recommended'),\n  ...\n  typescript: require('../config/typescript') };\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"importPlugin.flatConfigs"),"가 ",l.createElement(n.code,null,"undefined"),"이기 때문에 ",l.createElement(n.code,null,"importPlugin.flatConfigs.recommended,"),"에서 에러가 날 수밖에 없는 상황이에요. 제가 이전 글에서 이야기했던 추가 작업이란, 이 문제를 해결하기 위한 것이고요."),"\n",l.createElement(n.p,null,"그럼 이제 ",l.createElement(n.strong,null,"eslint-plugin-import"),"를 추가하기 위한 작업을 진행해볼게요."),"\n",l.createElement("br"),"\n",l.createElement(n.h2,null,"eslint-plugin-import 추가하기"),"\n",l.createElement(n.p,null,"먼저 ",l.createElement(n.strong,null,"@eslint/eslintrc"),"와 ",l.createElement(n.strong,null,"@eslint/compat")," 패키지를 설치해주세요."),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"yarn add -D @eslint/eslintrc @eslint/compat\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"이제 본격적으로 ",l.createElement(n.strong,null,"eslint-plugin-import"),"을 추가해볼게요. 먼저 추천 rule을 추가하는 것부터 해볼 거예요."),"\n",l.createElement(n.p,null,"지난 편에서 만들었던 설정파일에 다음과 같이 추천 rule을 추가해주세요."),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript"},"import js from '@eslint/js'\nimport { fixupConfigRules } from \"@eslint/compat\"\nimport { FlatCompat } from '@eslint/eslintrc'\nimport { configs as eslintPluginImportConfigs } from 'eslint-plugin-import'\n\nconst flatCompat = new FlatCompat();\n\nexport default [\n  ...fixupConfigRules(flatCompat.config(eslintPluginImportConfigs.recommended))\n  {\n    rules: {\n      ...js.configs.recommended.rules,\n      semi: 'error',\n      'prefer-const': 'error',\n    },\n  },\n]\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"이렇게 하면 ",l.createElement(n.strong,null,"eslint-plugin-import")," 추천 rule을 사용할 수 있어요."),"\n",l.createElement(n.p,null,"다음으로는 rule을 직접 추가하거나 수정하기 위해 ",l.createElement(n.code,null,"plugins"),"에 ",l.createElement(n.strong,null,"eslint-plugin-import"),"를 추가하는 방법을 알아볼게요. 아래 코드의 주석에서 설명하는 대로 ",l.createElement(n.code,null,"fixupPluginRules"),"를 사용해서 추가하세요."),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript"},"import js from '@eslint/js'\n// fixupPluginRules를 import 해요\nimport { fixupConfigRules, fixupPluginRules } from \"@eslint/compat\"\nimport { FlatCompat } from '@eslint/eslintrc'\n// importPlugin은 \"* as importPlugin\"의 단축형이에요\nimport importPlugin, { configs as eslintPluginImportConfigs } from 'eslint-plugin-import'\n\nconst flatCompat = new FlatCompat();\n\nexport default [\n  ...fixupConfigRules(flatCompat.config(eslintPluginImportConfigs.recommended))\n  {\n    plugins: {\n      // key는 import 외에 다른 것을 사용해도 돼요. 여기서 결정한 key가 rule의 접두사가 되니 이 점을 고려해서 지어주세요\n      import: fixupPluginRules(importPlugin),\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      semi: 'error',\n      'prefer-const': 'error',\n      // 이제 'import' 접두사를 붙여서 rule을 추가할 수 있어요\n      'import/consistent-type-specifier-style': 'warn',\n      'import/newline-after-import': ['warn', { exactCount: true, considerComments: true }],\n    },\n  },\n]\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"드디어 ",l.createElement(n.strong,null,"eslint-plugin-import"),"를 ",l.createElement(n.strong,null,"flat config"),"에서 사용할 수 있게 됐어요."),"\n",l.createElement(n.p,null,"만일 ",l.createElement(n.strong,null,"eslint-plugin-import")," 추천 rule을 사용할 생각이 없다면 ",l.createElement(n.strong,null,"@eslint/compat"),"만 사용하면 돼요."),"\n",l.createElement("br"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript"},"import js from '@eslint/js';\nimport { fixupPluginRules } from '@eslint/compat';\nimport importPlugin from 'eslint-plugin-import';\n\nexport default [\n  {\n    plugins: {\n      import: fixupPluginRules(importPlugin),\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      semi: 'error',\n      'prefer-const': 'error',\n      'import/consistent-type-specifier-style': 'warn',\n      'import/newline-after-import': ['warn', { exactCount: true, considerComments: true }],\n    },\n  },\n];\n")),"\n",l.createElement("br"),"\n",l.createElement(n.p,null,"다음 편에서는 TypeScript 사용자를 위해 ",l.createElement(n.strong,null,"typescript-eslint"),"를 추가하는 방법을 알려드릴게요."),"\n",l.createElement("br"),"\n",l.createElement(n.h2,null,"참고 자료"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://github.com/import-js/eslint-plugin-import/issues/2556#issuecomment-2267581659"},"https://github.com/import-js/eslint-plugin-import/issues/2556#issuecomment-2267581659")),"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://github.com/import-js/eslint-plugin-import/issues/2556#issuecomment-2272395246"},"https://github.com/import-js/eslint-plugin-import/issues/2556#issuecomment-2272395246")),"\n"),"\n",l.createElement("br"),"\n",l.createElement(n.h2,null,"연재"),"\n",l.createElement(n.p,null,l.createElement(n.a,{href:"/dev-flavoured-blog/%EC%96%B4%EC%A9%8C%EB%A9%B4-%EA%B9%8C%EB%8B%A4%EB%A1%9C%EC%9A%B8-%EC%88%98-%EC%9E%88%EB%8A%94-eslint-flat-config-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0-1-%EC%83%88-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0"},"어쩌면 까다로울 수 있는 eslint flat config 설정하기 1 - 새 설정파일 만들기")))}var a=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?l.createElement(n,e,l.createElement(i,e)):i(e)},o=t(4765);function m(e){return l.createElement(o.Z,e,l.createElement(a,e))}o.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-migrate-to-eslint-ver-9-2-index-mdx-3b5bbd60358c84467e6f.js.map