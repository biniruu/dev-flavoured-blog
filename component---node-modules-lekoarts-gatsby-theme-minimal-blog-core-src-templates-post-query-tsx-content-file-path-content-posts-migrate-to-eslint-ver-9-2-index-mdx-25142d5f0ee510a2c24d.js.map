{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-migrate-to-eslint-ver-9-2-index-mdx-25142d5f0ee510a2c24d.js","mappings":"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","sources":["webpack://dev-flavoured-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://dev-flavoured-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://dev-flavoured-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://dev-flavoured-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://dev-flavoured-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://dev-flavoured-blog/./content/posts/migrate-to-eslint-ver-9-2/index.mdx","webpack://dev-flavoured-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"사건의 발단\"), \"\\n\", React.createElement(_components.p, null, \"비상!🚨 ESLint 팀에서 공식 발표한 내용이에요! 2024년 10월 5일 이후로 버전 8 이하인 ESLint에 대해서는 손을 떼겠다고 해요.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"ESLint v8.x end-of-life is 2024-10-05 and will not be maintained after that. \", React.createElement(_components.a, {\n    href: \"https://eslint.org/docs/latest/use/migrate-to-9.0.0\"\n  }, \"Upgrade\"), \" or consider \", React.createElement(_components.a, {\n    href: \"https://eslint.org/version-support/\"\n  }, \"long-term support options\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이제는 버전 9 이후로 도입된 \", React.createElement(_components.strong, null, \"flat config\"), \" 방식으로 ESLint 설정 파일을 변경해야 해요.\"), \"\\n\", React.createElement(_components.p, null, \"그런데 ESLint 설정을 해보지 않았다면 또는 설정파일 구조에 익숙하지 않다면 공식문서에 있는 설정 방법을 보더라도 어렵게 느껴질 수 있어요. 기존 방식과 많이 다르기도 하고, 새로운 설정 방식을 아직 지원하지 않는 플러그인도 있거든요.\"), \"\\n\", React.createElement(_components.p, null, \"여기서는 제가 직접 새로운 방식으로 설정파일을 만들면서 알게 된 점을 알려드릴 거에요. 혹시라도 설정 과정에서 어려운 점이 있을 때 보면 도움이 될 거라고 생각해요.☺️\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, null, \"새 설정파일 만들기\"), \"\\n\", React.createElement(_components.p, null, \"먼저 파일명이 바뀌었어요. 파일명은 \", React.createElement(_components.strong, null, \"eslint.config.js\"), \"나 \", React.createElement(_components.strong, null, \"eslint.config.ts\"), \"처럼 \", React.createElement(_components.strong, null, \"eslint.config.*\"), \" 방식으로 지어야 해요. 자세한 내용은 \", React.createElement(_components.a, {\n    href: \"https://eslint.org/docs/latest/use/configure/configuration-files#configuration-file\"\n  }, \"Configuration File\"), \"에서 확인할 수 있어요.\"), \"\\n\", React.createElement(_components.p, null, \"이제 파일을 만들어볼 거예요. 공식 문서에 나온 대로 최소한의 rule을 가진 파일을 만들어볼게요.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"export default [\\n  {\\n    rules: {\\n      semi: 'error',\\n      'prefer-const': 'error',\\n    },\\n  },\\n]\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"축하합니다.👏🏻 이제 여러분은 새로운 설정 파일을 사용해서 프로젝트에 ESLint를 반영할 수 있게 됐어요. 어때요? 참 쉽죠?\"), \"\\n\", React.createElement(_components.p, null, \"여기서 이전 설정 방식과 달라진 점이 하나 있어요. 파일이 배열을 내보낸다는 것이에요. 이전에는 객체를 내보냈었어요. 참고로 알아두면 좋지만, 만일 이전에 ESLint 설정을 해본 적이 없다면 신경쓰지 않아도 괜찮아요.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, null, \"ESLint 추천 rule 추가하기\"), \"\\n\", React.createElement(_components.p, null, \"다음은 가장 기초적인 작업이에요. ESLint에서 공식적으로 제공하는 추천 rule을 추가해볼 거에요.\"), \"\\n\", React.createElement(_components.p, null, \"먼저 패키지를 설치해야 해요. 여기서는 Yarn을 사용해서 추가할게요.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"yarn add -D @eslint/js\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이제 설정파일에 추천 rule을 추가할게요.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"import js from '@eslint/js'\\n\\nexport default [\\n  {\\n    rules: {\\n      ...js.configs.recommended.rules,\\n      semi: 'error',\\n      'prefer-const': 'error',\\n    },\\n  },\\n]\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 하면 ESLint 팀에서 추천하는 rule을 활성화 시킬 수 있어요. 만일 그 아래로 추가하는 rule 중에 추천 rule과 동일한 rule이 있다면 추천 rule을 덮어쓰게 되고요.\"), \"\\n\", React.createElement(_components.p, null, \"다음 편에서는 \", React.createElement(_components.strong, null, \"eslint-plugin-import\"), \"를 추가하는 방법을 알려드릴게요. 아직 \", React.createElement(_components.strong, null, \"eslint-plugin-import\"), \"가 \", React.createElement(_components.strong, null, \"flat config\"), \"를 지원하지 않아서 \", React.createElement(_components.strong, null, \"eslint-plugin-import\"), \"를 추가하기 위해서는 몇 가지 추가 작업이 필요해요. 이 작업을 다음 편에서 설명해드릴 거예요.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/biniruu/WebDev/dev-flavoured-blog/content/posts/migrate-to-eslint-ver-9-2/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","h2","p","blockquote","strong","pre","code","_provideComponents","components","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}